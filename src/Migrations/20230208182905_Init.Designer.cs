// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project_foodie.Model;

#nullable disable

namespace projectfoodie.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230208182905_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("project_foodie.Model.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("project_foodie.Model.AllergenDish", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DishId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AllergenId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("AllergenDish");
                });

            modelBuilder.Entity("project_foodie.Model.AllergenIngredient", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AllergenId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("AllergenIngredient");
                });

            modelBuilder.Entity("project_foodie.Model.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("project_foodie.Model.DishMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DishId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MenuId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("DishMenu");
                });

            modelBuilder.Entity("project_foodie.Model.DishOrder", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DishId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("DishOrder");
                });

            modelBuilder.Entity("project_foodie.Model.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("project_foodie.Model.IngredientDish", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DishId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IngredientId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("IngredientDish");
                });

            modelBuilder.Entity("project_foodie.Model.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("lastOrderDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("project_foodie.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("menuId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("project_foodie.Model.OrderItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("project_foodie.Model.OrderItemOrder", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItemOrder");
                });

            modelBuilder.Entity("project_foodie.Model.AllergenDish", b =>
                {
                    b.HasOne("project_foodie.Model.Allergen", "Allergen")
                        .WithMany("AllergenDish")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_foodie.Model.Dish", "Dish")
                        .WithMany("AllergenDish")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("project_foodie.Model.AllergenIngredient", b =>
                {
                    b.HasOne("project_foodie.Model.Allergen", "Allergen")
                        .WithMany("AllergenIngredient")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_foodie.Model.Ingredient", "Ingredient")
                        .WithMany("AllergenIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("project_foodie.Model.DishMenu", b =>
                {
                    b.HasOne("project_foodie.Model.Dish", "Dish")
                        .WithMany("DishMenu")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_foodie.Model.Menu", "Menu")
                        .WithMany("DishMenu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("project_foodie.Model.DishOrder", b =>
                {
                    b.HasOne("project_foodie.Model.Dish", "Dish")
                        .WithMany("DishOrder")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_foodie.Model.Order", "Order")
                        .WithMany("DishOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("project_foodie.Model.IngredientDish", b =>
                {
                    b.HasOne("project_foodie.Model.Dish", "Dish")
                        .WithMany("IngredientDish")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_foodie.Model.Ingredient", "Ingredient")
                        .WithMany("IngredientDish")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("project_foodie.Model.OrderItemOrder", b =>
                {
                    b.HasOne("project_foodie.Model.Order", "Order")
                        .WithMany("OrderItemOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_foodie.Model.OrderItem", "OrderItem")
                        .WithMany("OrderItemOrder")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("project_foodie.Model.Allergen", b =>
                {
                    b.Navigation("AllergenDish");

                    b.Navigation("AllergenIngredient");
                });

            modelBuilder.Entity("project_foodie.Model.Dish", b =>
                {
                    b.Navigation("AllergenDish");

                    b.Navigation("DishMenu");

                    b.Navigation("DishOrder");

                    b.Navigation("IngredientDish");
                });

            modelBuilder.Entity("project_foodie.Model.Ingredient", b =>
                {
                    b.Navigation("AllergenIngredient");

                    b.Navigation("IngredientDish");
                });

            modelBuilder.Entity("project_foodie.Model.Menu", b =>
                {
                    b.Navigation("DishMenu");
                });

            modelBuilder.Entity("project_foodie.Model.Order", b =>
                {
                    b.Navigation("DishOrder");

                    b.Navigation("OrderItemOrder");
                });

            modelBuilder.Entity("project_foodie.Model.OrderItem", b =>
                {
                    b.Navigation("OrderItemOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
