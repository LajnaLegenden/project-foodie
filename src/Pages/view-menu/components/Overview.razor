@using project_foodie.Model
@using project_foodie.Modules
@using project_foodie.Repository
@using System.Globalization
@inject ILocalStorageService localStorage

@if (dataLoaded)
{
    <div class="overview-container">
        <h1>Översikt över dina val</h1>
        <p>Beställningsdag: 2023-01-23</p>
        <p>Leverans: 2023-02-01</p>

        <table class="overview-table">
            <tr>
                <th>Veckodag</th>
                <th>Lunch</th>
                <th>Lunch pris</th>
                <th>Middag</th>
                <th>Middag pris</th>
                <th>Totalt</th>
                <th></th>
            </tr>
            @foreach (var date in dates)
            {
                int index = data.FindIndex(a => a.dm.date == date);
                <tr>
                    @if (index == -1)
                    {
                        DayMenu dm = DayMenuHelper.getDayMenuByDate(menu, date);

                        <td data-label="Veckodag">@DayMenuHelper.convertToWeekday(date)</td>
                        <td data-label="Lunch"></td>
                        <td data-label="Pris">0:-</td>
                        <td data-label="Middag"></td>
                        <td data-label="Pris">0:-</td>
                        <td data-label="Totalt">0:-</td>
                        <td>
                            <a href="@getModifyUrlbyDayMenu(dm)" class="change-dish-button">Ändra val</a>
                        </td>
                    }
                    else
                    {
                        <td data-label="Veckodag">@DayMenuHelper.convertToWeekday(data[index].dm.date)</td>
                        <td data-label="Lunch">
                            <ul>
                                @foreach (var item in data[index].dishCount)
                                {
                                    if (item.dm.type == OrderType.Lunch)
                                    {
                                        if (item.Count == -1)
                                        {
                                            <li>Överhoppad</li>
                                        }
                                        else
                                        {
                                            <li>
                                                @getDishFromDmById(item.dishId, item.dm).Name x @item.Count
                                            </li>
                                        }
                                    }
                                }
                            </ul>
                        </td>
                        <td data-label="Pris">@data[index].LunchPrice:-</td>
                        <td data-label="Middag">
                            <ul>
                                @foreach (var item in data[index].dishCount)
                                {
                                    if (item.dm.type == OrderType.Middag)
                                    {
                                        if (item.Count == -1)
                                        {
                                            <li>Överhoppad</li>
                                        }
                                        else
                                        {
                                            <li>
                                                @getDishFromDmById(item.dishId, item.dm).Name x @item.Count
                                            </li>
                                        }
                                    }
                                }
                            </ul>
                        </td>
                        <td data-label="Pris">@data[index].DinnerPrice:-</td>
                        <td data-label="Totalt">@(data[index].LunchPrice + data[index].DinnerPrice):-</td>
                        <td>
                            <a href="@getModifyUrl(data[index])" class="change-dish-button">Ändra val</a>
                        </td>
                    }
                </tr>
            }
            <h2 class="total-all-price">Total: @getTotalPrice():- </h2>
        </table>
    </div>
    @if (PopupOpen)
    {
        <OrderFailPopup OnClose="@PopupClose"/>
    }
}
else
{
    <h1>Loading</h1>
}

@code {

    [Parameter]
    public Menu menu { get; set; }
    private List<LocalStorage.Row> data;
    public bool dataLoaded = false;
    HashSet<DateTime> dates = new HashSet<DateTime>();

    /*------- Popup (Modal dialog)--------*/
    public bool PopupOpen { get; set; }

    private void PopupClose(bool accepted)
    {
        PopupOpen = false;
        StateHasChanged();
    }

    private void OpenPopup()
    {
        PopupOpen = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (var dayMenu in DayMenuHelper.getSortedDayMenus(menu))
        {
            dates.Add(dayMenu.DayMenu.date);
        }

        if (!dataLoaded)
        {
            data = await LocalStorage.LoadData(localStorage, menu);
            dataLoaded = true;
            StateHasChanged();
        }
    }

    public async Task<Order> SaveOrder()
    {
        using (var db = new DatabaseContext())
        {
            IRepositoryWrapper repository = new RepositoryWrapper(db);
            var menuRepository = new MenuRepository(db);
            var dishRepository = new DishRepository(db);

            // Create a new order connected to the current menu
            var order = new Order
            {
                userId = 1,
            // This next line will trigger an exception, use for development to trigger OrderFailPopup.
                @* menu= menu, *@
            menu = await menuRepository.GetByIdAsync(menu.Id),
                orderDate = DateTime.Now,
                orderItems = new List<OrderItem>()
            };
            repository.Order.AddOrder(order);
            //loop trough dishes in local storage to create orderItems
            @foreach (var r in data)
            {
                var date = r.dm.date;
                @foreach (var item in r.dishCount)
                {
                    var dish = await dishRepository.GetByIdAsync(item.dishId);
                    var amount = item.Count;
                    var orderType = item.dm.type;
                    repository.Order.AddOrderItem(order, dish, amount, date, orderType);
                }
            }
            // Lastly, save changes to database. If something goes wrong catch exception and open OrderFailPopup.
            try
            {
                await repository.SaveAsync();
                return order;
            }
            catch (DbUpdateConcurrencyException)
            {
                OpenPopup();
                throw;
            }
            catch (DbUpdateException)
            {
                OpenPopup();
                throw;
            }
        }
    }

    private string getModifyUrl(LocalStorage.Row r)
    {
        // /order/id/page=r.index
        var url = "/order/" + menu.Id + "?page=" + DayMenuHelper.getDayMenuIndex(menu, r.dm);
        return url;
    }

    private string getModifyUrlbyDayMenu(DayMenu dm)
    {
        // /order/id/page=r.index
        var url = "/order/" + menu.Id + "?page=" + DayMenuHelper.getDayMenuIndex(menu, dm);
        return url;
    }

    private int getTotalPrice()
    {
        var Total = 0;
        foreach (var r in data)
        {
            Total += r.LunchPrice + r.DinnerPrice;
        }
        return Total;
    }

    private Dish getDishFromDmById(int id, DayMenu dm)
    {
        foreach (var d in dm.dishes)
        {
            if (d.Id == id)
                return d;
        }
        return null;
    }
}