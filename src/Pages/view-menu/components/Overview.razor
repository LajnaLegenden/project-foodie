@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using project_foodie.Model
@using project_foodie.Repository;

<h1>@DishName</h1>

@code {

    public string DishName { get; set; }

    public JObject LocalStorageObj { get; private set; }

    public int id;

    [Parameter]
    public Menu menu { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task GetData()
    {
        var localStorageData = await localStorage.GetItemAsync<string>("dishData");

        var localStorageObj = JObject.Parse(localStorageData);
        LocalStorageObj = JObject.Parse(localStorageData);

        Console.WriteLine(LocalStorageObj);

        foreach (var keyValue in localStorageObj)
        {

            foreach (var idCount in (JObject)keyValue.Value)
            {

                if (int.TryParse(idCount.Key, out int id) && await GetById(id) is Dish dish)
                {
                    Console.WriteLine("DishName: " + dish.Name);
                }
            }
        }
    }

    private async Task<Dish> GetById(int id)
    {
        using (var db = new DatabaseContext())
        {
            DishRepository dr = new DishRepository(db);
            Dish dish = await dr.GetByIdAsync(id);

            DishName = dish.Name;
            return dish;
        }
    }
}
