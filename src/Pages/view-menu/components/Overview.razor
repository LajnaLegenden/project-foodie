@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using project_foodie.Model;
@using project_foodie.Repository;


@foreach (var dish in Dishes)
{
    <h2>@dish.Name</h2>
    <p>@dish.description</p>
    <p>@dish.Price</p>
}

@code {
    [Parameter]
    public Menu menu { get; set; }

    public List<Dish> Dishes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Dishes = new List<Dish>();

        var localStorageData = await localStorage.GetItemAsync<string>("dishData");
        var localStorageObj = JObject.Parse(localStorageData);

        foreach (var keyValue in localStorageObj)
        {
            foreach (var idCount in (JObject)keyValue.Value)
            {
                if (int.TryParse(idCount.Key, out int id) && await GetById(id) is Dish dish)
                {
                    Dishes.Add(dish);
                }
            }
        }
    }

    private async Task<Dish> GetById(int id)
    {
        using (var db = new DatabaseContext())
        {
            DishRepository dr = new DishRepository(db);
            Dish dish = await dr.GetByIdAsync(id);
            return dish;
        }
    }
}
