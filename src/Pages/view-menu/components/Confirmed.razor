@inject ILocalStorageService localStorage
@
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using project_foodie.Model
@using project_foodie.Modules

@if (dataLoaded)
{
    <div class="confirmedContainer">
        <div class="title">
            <h1>Beställningen är nu bekräftad!</h1>
        </div>
        <div class="infoContainer">
            <div class="logoContainer">
                <img src="/images/confetti.png"/>
            </div>
            <div class="information">
                <div class="parameters">
                    <h2>Namn:</h2>
                    <h2>Beställningsdag:</h2>
                    <h2>Antal beställda måltider:</h2>
                    <h2>Leveransdatum:</h2>
                    <h2>Totalt Pris:</h2>
                </div>
                <div class="inputs">
                    <h2>Thomas Andersson</h2>
                    <h2>@order.orderDate</h2>
                    <h2>@getNumberOfMeals()</h2>
                    <h2>2023-03-06</h2>
                    <h2>@getTotalPrice():-</h2>
                </div>
            </div>
        </div>
        <div class="buttonContainer">
            <button @onclick="@(() => NavManager.NavigateTo("/"))">Klart</button>
        </div>
    </div>
}
else
{
    <div class="loading">
        <h1>Loading...</h1>
    </div>
}

@code {

    [Parameter]
    public Menu menu { get; set; }

    [Parameter]
    public Order order { get; set; } = null;

    private List<LocalStorage.Row> data;

    public bool dataLoaded = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!dataLoaded)
        {
            data = await LocalStorage.LoadData(localStorage, menu);
            dataLoaded = true;
            StateHasChanged();
        }
        await JSRuntime.InvokeVoidAsync("confettis");
    }

    private int getTotalPrice()
    {
        var Total = 0;
        foreach (var item in order.orderItems)
        {
            Total += item.dish.Price * item.quantity;
        }
        return Total;
    }

    private int getNumberOfMeals()
    {
        OrderItem _prevOrderItem = null;
        var Total = 0;
        foreach (var item in order.orderItems)
        {
    //Count number of meals (more orderItems can be created per meal)
            if (_prevOrderItem != null && _prevOrderItem.date == item.date && _prevOrderItem.type == item.type)
            {
                continue;
            }
            Total += 1;
            _prevOrderItem = item;
        }
        return Total;
    }

}