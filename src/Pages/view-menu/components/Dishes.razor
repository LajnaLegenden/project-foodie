@using project_foodie.Pages.view_menu.components
@using project_foodie.Model;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Newtonsoft.Json;

<div class="food-card">
    <div @onclick="() => OpenPopup()" class="food-card-img-container">

    </div>
    <div class="food-card-body">
        <div class="food-card-upper-body">
            <div class="food-card-food-container">
                <p class="food-card-text">@dishData.Dish.Name</p>
                <p class="food-card-text-extra">@dishData.Dish.description</p>
            </div>
            <div class="food-card-price-container">
                <p class="food-card-price">@dishData.Dish.Price:-</p>
            </div>
        </div>
        <div class="allergener">
            <li>Stark</li>
            <li>Gluttenfritt</li>
            <li>Mjölkfri</li>
        </div>
        <div class="food-card-btn-container">
            @if (showInput)
            {
                <div class="btn-add-container">
                    <button class="food-card-btn-decrement"
                    @onclick="@((e) => DecrementCount(id, DishName, DishDescription))">-</button>
                    <input type="text" class="text-add-placeholder" count="@count" placeholder="@count st"
                        readonly="readonly" />
                    <button class="food-card-btn-increment"
                    @onclick="@((e) => IncrementCount(id, DishName, DishDescription))">+</button>
                </div>
            }
            else
            {
                <button class="@ButtonClass food-card-btn" type="submit" @onclick="ToggleInput">Välj</button>
            }
        </div>
    </div>
</div>

@if (PopupOpen) 
{
    <Contents DishName="@dishData.Name" OnClose="@PopupClose"/>
}

@code {
    /*------- Popup (Modal dialog)--------*/
    public bool PopupOpen { get; set; }

    private void PopupClose(bool accepted) 
    {
        PopupOpen = false;
        StateHasChanged();
    }
    private void OpenPopup() 
    {
        PopupOpen = true;
        StateHasChanged();
    }
    /*-------------------------------------*/

    [Parameter]
    public int id { get; set; }

    [Parameter]
    public string DishName { get; set; }
    [Parameter]
    public string DishDescription { get; set; }

    [Parameter]
    public project_foodie.Model.DishMenu dishData { get; set; }

    private int count = 0;
    private bool showInput = false;
    private string ButtonClass => count <= 0 ? "food-card-btn food-card-btn-add-amount" : "food-card-btn food-card-btn-add";

    private string jsonString;

    public class DishInformation
    {
        public int Count { get; set; }
        public int ID { get; set; }
        public string dishname { get; set; }
        public string dishdiscription { get; set; }
    }

    private void ToggleInput()
    {

        showInput = !showInput;
        if (showInput)
        {
            count = 1;
        }
        else
        {
            count = 0;
        }
    }

    private async void IncrementCount(int ID, string dishname, string dishdiscription)
    {
        count++;
        DishInformation dishInfo = new DishInformation
            {
                ID = @dishData.Dish.Id,
                Count = count,
                dishname = @dishData.Dish.Name,
                dishdiscription = @dishData.Dish.description
            };

        string json = JsonConvert.SerializeObject(dishInfo);
        await localStorage.SetItemAsync("LocalDataDishes", json);
    }


    private async Task GetData()
    {
        var localStorageCount = await localStorage.GetItemAsync<string>("LocalDataDishes");
        var localStorageCountJson = JsonConvert.DeserializeObject(localStorageCount);
        //parse localStorageCount into json format
        jsonString = JsonConvert.SerializeObject(localStorageCountJson);
    }

    private async void DecrementCount(int ID, string dishname, string dishdiscription)
    {
        if (count > 0)
        {
            count--;
            DishInformation dishInfo = new DishInformation
                {
                    ID = @dishData.Dish.Id,
                    Count = count,
                    dishname = @dishData.Dish.Name,
                    dishdiscription = @dishData.Dish.description
                };

            string json = JsonConvert.SerializeObject(dishInfo);
            await localStorage.SetItemAsync("LocalDataDishes", json);
        }

        if (count == 0)
        {
            showInput = false;
        }
    }


}



