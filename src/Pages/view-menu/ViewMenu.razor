@page "/order"
@using project_foodie.Data
@using project_foodie.Pages.view_menu.components
@inject NavigationManager UriHelper
@using project_foodie.Model;
@using Newtonsoft.Json;
@using System.Globalization;
@using project_foodie.Repository;

@if (loading)
{
    <p>Loading</p>
}
else
{
    <div class="day-container">
        <h1 class="week-highlight">@_menu.Name</h1>
        <h1>@activeWeekday()</h1>
        <h1>@dateString()</h1>
    </div>
    <div class="menu-container">
    @foreach (var dayMenu in getSortedDayMenus())
        {
            @if (selectedIndex == dayMenu.Index)
            {
                <MenuContainer dayMenu=@dayMenu.DayMenu />
            }
        }
        @if(selectedIndex == overViewIndex){
        <Overview />
        }


        <div class="button-container">
            <button @onclick="prevPage" class="button-back">Föregående dag</button>
            <button @onclick="nextPage" class="button-forward">@getNextButtonString()</button>
        </div>
    </div>
}

@code {
    string category = "all";
    private int selectedIndex = 0;
    private int overViewIndex;
    private Menu _menu;
    private bool loading = true;

    protected class DayMenuIndex
    {
        public int Index;
        public DayMenu DayMenu;
    }

    string activeWeekday() {
        return convertToWeekday(getSortedDayMenus()[selectedIndex].DayMenu.date);
    }

    string dateString() {
        return dateFormat(getSortedDayMenus()[selectedIndex].DayMenu.date);
    }


    protected override async Task OnInitializedAsync()
    {
        using (var db = new DatabaseContext())
        {
            MenuRepository mr = new MenuRepository(db);
            List<Menu> menus = await mr.GetAllAsync();

            menus.Sort((m1, m2) => m1.lastOrderDate > m2.lastOrderDate ? 1 : -1);

            DateTime now = DateTime.Now;

            foreach (Menu menu in menus)
            {
                if (menu.lastOrderDate > now)
                {
                    _menu = menu;
                    loading = false;
                    break;
                }
            }

            overViewIndex = _menu.dayMenus.Count;
        }

    }

private List<(DayMenu DayMenu, int Index)> getSortedDayMenus()
{
    var indexedDayMenus = _menu.dayMenus
        .Select((d, i) => new { DayMenu = d, Index = i })
        .OrderBy(di => di.DayMenu.date)
        .ThenBy(di => di.DayMenu.type)
        .ToList();

    var sortedDayMenus = indexedDayMenus.Select(di => di.DayMenu).ToList();

    var result = new List<(DayMenu DayMenu, int Index)>();

    for (int i = 0; i < indexedDayMenus.Count(); i++)
    {
        result.Add((indexedDayMenus[i].DayMenu, i));
    }
        
    return result;
}

    private string convertToWeekday(DateTime date)
    {
        string weekday = "";

        weekday = date.ToString("dddddd", new System.Globalization.CultureInfo("sv-SE"));
        weekday = char.ToUpper(weekday[0]) + weekday.Substring(1);

        return weekday;
    }

    private string dateFormat(DateTime date)
    {
        return date != null ? date.ToString("dd/M") : "";
    }

    private void nextPage()
    {
        selectedIndex++;
        checkPageMax();
    }

    private void prevPage()
    {
        selectedIndex--;
        checkPageMax();
    }

    private void checkPageMax(){
        if(selectedIndex < 0){
            selectedIndex = 0;
        } else if(selectedIndex > overViewIndex){
            selectedIndex = overViewIndex;
        }
    }

    private string getNextButtonString(){
        return selectedIndex == overViewIndex ? "Lägg Order" : "Nästa Dag";
    }

}