@page "/order"
@using project_foodie.Data
@using project_foodie.Pages.view_menu.components
@inject NavigationManager UriHelper
@using project_foodie.Model;
@using Newtonsoft.Json;
@using System.Globalization;
@using project_foodie.Repository;

<div class="information">
    @if (@_menu == null)
    {
        <h1>Ajdå</h1>
    }
    else
    {
        <h1 class="text-week">@_menu.startDate</h1>
    }
    <h1 class="text-day">@activeWeekday @dateString</h1>
</div>
<div class="radio-group">
    <input type="radio" id="radio-1" name="group" @onclick="() => toggleClass(1)" />
    <label for="radio-1">Kött</label>

    <input type="radio" id="radio-2" name="group" @onclick="() => toggleClass(2)" />
    <label for="radio-2">Fläsk</label>

    <input type="radio" id="radio-3" name="group" @onclick="() => toggleClass(3)" />
    <label for="radio-3">Kyckling</label>

    <input type="radio" id="radio-4" name="group" @onclick="() => toggleClass(4)" />
    <label for="radio-4">Vegetariskt</label>

    <input type="radio" id="radio-5" name="group" @onclick="() => toggleClass(5)" />
    <label for="radio-5">Visa Alla</label>
</div>
@if (viewMenu)
{
    @if (@_menu == null)
    {
        <h1>Ajdå</h1>
    }
    else
    {
        <div class="menu-container">
    @foreach (DayMenu dishdays in _menu.dayMenus)
            {
                <MenuContainer menuData=@dishdays day=@activeWeekday menuId=@_menu.Id />
            }
            <div class="button-container">
                <button @onclick="DecrementDate" class="button-back">Föregående dag</button>
                <button @onclick="IncrementDate" class="button-forward">Nästa dag</button>
            </div>
        </div>
    }
}
else
{
    <div class="overview-container">
    <!-- Lägg in overview-container här-->
    <Overview />
</div>
}

@code {
    // Testdatum

    DateTime startDate;
    DateTime endDate;
    DateTime activeDate;

    List<DateTime> dates = new List<DateTime>();

    string activeWeekday;
    string dateString;

    bool viewMenu = true;
    private int count = 1;
    protected override async Task OnInitializedAsync()
    {
        activeWeekday = convertToWeekday(activeDate);
        dateString = dateFormat(activeDate);
    }

    private string convertToWeekday(DateTime date)
    {
        string weekday = "";

        weekday = date.ToString("dddddd", new System.Globalization.CultureInfo("sv-SE"));
        weekday = char.ToUpper(weekday[0]) + weekday.Substring(1);

        return weekday;
    }

    private string dateFormat(DateTime date)
    {
        string dateAsString = "";

        dateAsString = date.ToString("dd/M");

        return dateAsString;
    }

    void Navigate()
    {
        if (count == 1)
        {
            UriHelper.NavigateTo("order");
        }
    }

    private void IncrementDate()
    {
        if (activeDate <= endDate)
        {
            activeDate = activeDate.AddDays(1);
            if (activeDate > endDate)
            {
                viewMenu = false;
            }
            else
            {
                //count++;
                //Console.WriteLine(count);
                activeWeekday = convertToWeekday(activeDate);
                dateString = dateFormat(activeDate);
            }
        }
    }

    private void DecrementDate()
    {
        if (activeDate > startDate)
        {
            //count--;
            //Console.WriteLine(count);
            activeDate = activeDate.AddDays(-1);
        }

        activeWeekday = convertToWeekday(activeDate);
        dateString = dateFormat(activeDate);
    }

    string category = "all";

    void toggleClass(int type)
    {
        if (type == 1)
        {
            category = "kött";
        }
        else if (type == 2)
        {
            category = "fläsk";
        }
        else if (type == 3)
        {
            category = "kyckling";
        }
        else if (type == 4)
        {
            category = "vegetariskt";
        }
        else
        {
            category = "all";
        };
    }
    private List<Menu> _allMenus;
    private Menu _menu;

    protected async override void OnInitialized()
    {
        using (var context = new DatabaseContext())
        {
            MenuRepository menuRepository = new MenuRepository(context);
            this._allMenus = await menuRepository.GetAllAsync();
        }
        foreach (var menu in _allMenus)
        {
            string menuLastOrderDate = menu.lastOrderDate.ToShortDateString();
            DateTime dateTimeLastOrder = DateTime.ParseExact(menuLastOrderDate, "MM/dd/yyyy", CultureInfo.InvariantCulture);
            DateTime dateTimeToday = DateTime.ParseExact(@DateTime.Today.ToShortDateString(), "MM/dd/yyyy",
            CultureInfo.InvariantCulture);
            if (dateTimeLastOrder > dateTimeToday)
            {
                _menu = menu;
                break;
            }
        }

        string menuLastOrderDates = _menu.lastOrderDate.ToShortDateString();
        string menuStartDate = _menu.startDate.ToShortDateString();
        DateTime dtLast = DateTime.ParseExact(menuLastOrderDates, "MM/dd/yyyy", CultureInfo.InvariantCulture);
        DateTime dtStart = DateTime.ParseExact(menuLastOrderDates, "MM/dd/yyyy", CultureInfo.InvariantCulture);
        Console.WriteLine(dtLast.Day);
        startDate = new DateTime(dtStart.Year, dtStart.Month, dtStart.Day);
        endDate = new DateTime(dtLast.Year, dtLast.Month, dtLast.Day);
        activeDate = new DateTime(dtStart.Year, dtStart.Month, dtStart.Day);
        toggleClass(1);
    }
}