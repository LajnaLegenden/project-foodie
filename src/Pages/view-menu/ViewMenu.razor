@page "/order"
@using project_foodie.Data
@using project_foodie.Pages.view_menu.components
@inject NavigationManager UriHelper
@using project_foodie.Model;
@using Newtonsoft.Json;
@using System.Globalization;
@using project_foodie.Repository;
@inject IJSRuntime JS;
@inject IJSRuntime JSRuntime
@using project_foodie.Service
@inject BrowserService Service

@if (loading)
{
    <p>Loading</p>
}
else
{
    @if(selectedIndex == -1) {
        <ViewStart menuInfo=@_menu/>
    } else if (selectedIndex == confirmedViewIndex) {
        <Confirmed menu="@_menu"/>
    } else {
        @if(selectedIndex != overViewIndex) {
            <Timeline menu="@_menu" currentIndex="@selectedIndex" state="@viewPort"/>
            <div class="day-container">
                <h1 class="week-highlight">@_menu.Name</h1>
                <h1 class=@dayString>@activeWeekday()</h1>
                <h1 class=@dayString>@dateString()</h1>
            </div>
        }
        <div class="menu-container">
            @if(selectedIndex != overViewIndex) {
                <div class="radio-group">
                    <EditForm Model="@_model">
                        <InputRadioGroup @bind-Value="_model.Category">

                        <input type="radio" id="radio-1" name="group" checked="checked" @onchange="(() => Category = categoryList[0].Category)" />
                        <label for="radio-1">Alla</label>

                        <input type="radio" id="radio-2" name="group" @onchange="(() => Category = categoryList[1].Category)" />
                        <label for="radio-2">Grundkost</label>

                        <input type="radio" id="radio-3" name="group" @onchange="(() => Category = categoryList[2].Category)" />
                        <label for="radio-3">Vegetariskt</label>
                        </InputRadioGroup>
                    </EditForm>
                </div>
            }
            @foreach (var dayMenu in ViewMenu.getSortedDayMenus(_menu))
                {
                    <div class="@(showSelected(dayMenu.Index) ? "shown" : "hidden")">
                        <MenuContainer dayMenu=@dayMenu.DayMenu Category="@Category"/>
                    </div>
                }
            @if(selectedIndex == overViewIndex){
                <Overview menu="@_menu"/>
            }

            <div class="button-container">
                <button @onclick="prevPage" class="button-back">@getBackButtonString()</button>
                <button @onclick="nextPage" class="button-forward">@getNextButtonString()</button>
            </div>
        </div>
    }
    @if(selectedIndex == -1) {
        <div class="button-start-container">
            <button @onclick="nextPage" class="button-start">Beställ här</button>
        </div>
    }
}

@code {
    public string Category = "all";
    private int selectedIndex = -1;
    private int overViewIndex;
    private int confirmedViewIndex;
    private Menu _menu;
    private bool loading = true;
    public string viewPort {get; set;} = "desktop";
    private DotNetObjectReference<ViewMenu> objRef;
    private string dayString => selectedIndex == overViewIndex ? "overview-day-container" : "viewmenu-day-container";


    private List<Categories> categoryList = new()
        {
            new Categories()
            {
                Category = "all"
            },
            new Categories()
            {
                Category = "grundkost"
            },
            new Categories()
            {
                Category = "vegetariskt"
            }
        };

    private Categories _model = new() { Category = "all" };

    protected class DayMenuIndex
    {
        public int Index;
        public DayMenu DayMenu;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var viewPort = await JS.InvokeAsync<string>("blazorOnLoad", objRef);
                Console.WriteLine(System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);
        }
    }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    //C#
    [JSInvokable]
    public void setViewPort(string state)
    {
        viewPort = state;
        InvokeAsync(StateHasChanged);
    }

    string activeWeekday() {
        if(selectedIndex == -1 || selectedIndex >= ViewMenu.getSortedDayMenus(_menu).Count) {
            return "";
        }
        return convertToWeekday(ViewMenu.getSortedDayMenus(_menu)[selectedIndex].DayMenu.date);
    }

    string dateString() {
        if(selectedIndex == -1 || selectedIndex >= ViewMenu.getSortedDayMenus(_menu).Count) {
            return "";
        }
        return dateFormat(ViewMenu.getSortedDayMenus(_menu)[selectedIndex].DayMenu.date);
    }

bool showSelected(int  i) {
 return selectedIndex  == i;
}
    protected override async Task OnInitializedAsync()
    {
        using (var db = new DatabaseContext())
        {
            MenuRepository mr = new MenuRepository(db);
            List<Menu> menus = await mr.GetAllAsync();

            menus.Sort((m1, m2) => m1.lastOrderDate > m2.lastOrderDate ? 1 : -1);

            DateTime now = DateTime.Now;

            foreach (Menu menu in menus)
            {
                if (menu.lastOrderDate > now)
                {
                    _menu = menu;
                    loading = false;
                    break;
                }
            }

            overViewIndex = _menu.dayMenus.Count;
            confirmedViewIndex = overViewIndex + 1;
        }

    }
public static List<(DayMenu DayMenu, int Index)> getSortedDayMenus(Menu menu)
{
    var indexedDayMenus = menu.dayMenus
        .Select((d, i) => new { DayMenu = d, Index = i })
        .OrderBy(di => di.DayMenu.date)
        .ThenBy(di => di.DayMenu.type)
        .ToList();

    var sortedDayMenus = indexedDayMenus.Select(di => di.DayMenu).ToList();

    var result = new List<(DayMenu DayMenu, int Index)>();

    for (int i = 0; i < indexedDayMenus.Count(); i++)
    {
        result.Add((indexedDayMenus[i].DayMenu, i));
    }

    return result;
}

    private string convertToWeekday(DateTime date)
    {
        string weekday = "";

        weekday = date.ToString("dddddd", new System.Globalization.CultureInfo("sv-SE"));
        weekday = char.ToUpper(weekday[0]) + weekday.Substring(1);

        return weekday;
    }

    private string dateFormat(DateTime date)
    {
        return date != null ? date.ToString("dd/M") : "";
    }

    private async void nextPage()
    {
        selectedIndex++;
        checkPageMax();
        if (viewPort != "desktop") {
            await JSRuntime.InvokeVoidAsync("scrollToTop");
        }
    }

    private async void prevPage()
    {
        selectedIndex--;
        checkPageMax();
        if (viewPort != "desktop") {
            await JSRuntime.InvokeVoidAsync("scrollToTop");
        }
    }

    private void checkPageMax(){
        if(selectedIndex < -1){
            selectedIndex = -1;
        } else if(selectedIndex > confirmedViewIndex){
            selectedIndex = confirmedViewIndex;
        }
    }
    private string getBackButtonString() {
        return selectedIndex == 0 ? "Gå till start" : "Föregående";
    }

    private string getNextButtonString(){
        return selectedIndex == overViewIndex ? "Lägg Order" : "Nästa";
    }
}