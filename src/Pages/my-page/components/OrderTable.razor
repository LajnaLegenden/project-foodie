@using project_foodie.Model
@using project_foodie.Modules
@using System.Globalization
<table class="order-table @delivered(@orderStatus)">
    <tr>
        <th>Beställningsnummer</th>
        <th>Orderdatum</th>
        <th>Leveransvecka</th>
        <th>Totalsumma</th>
        <th>Status</th>
        <td rowspan="2">
            <button class="details-button" onclick="@showDetails">@getButtonString()</button>
        </td>
    </tr>
    <tr>
        <td>@orderData.Id</td>
        <td>@orderData.orderDate.ToString("yyyy-MM-dd")</td>
        <td>Vecka @weekNr</td>
        <td>@totalPrice :-</td>
        <td class="td-@delivered(@orderStatus)">@orderStatus</td>
    </tr>
</table>

@if (detailsVisible)
{
    <table class="order-details-table">
        <thead>
        <tr>
            <th>Veckodag</th>
            <th>Måltid</th>
            <th>Maträtt</th>
            <th>Antal</th>
            <th>Pris</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var dayMenu in DayMenuHelper.getSortedDayMenus(orderData.menu))
        {
            @foreach (var orderItem in orderData.orderItems)
            {
                @if (orderItem.date == dayMenu.DayMenu.date && orderItem.type == dayMenu.DayMenu.type)
                {
                    @if (previousDate == dayMenu.DayMenu.date)
                    {
                        <tr>
                            <td></td>
                            @if (previousType == dayMenu.DayMenu.type)
                            {
                                <td></td>
                                <td>@orderItem.dish.Name</td>
                                <td>@orderItem.quantity st</td>
                                <td>@orderItem.dish.Price:-</td>
                            }
                            else
                            {
                                <td>@dayMenu.DayMenu.type</td>
                                <td>@orderItem.dish.Name</td>
                                <td>@orderItem.quantity st</td>
                                <td>@orderItem.dish.Price:-</td>
                            }
                        </tr>
                    }
                    else
                    {
                        <tr class="last-item">
                            <td>@DayMenuHelper.convertToWeekday(dayMenu.DayMenu.date)</td>
                            @if (previousType == dayMenu.DayMenu.type)
                            {
                                <td></td>
                                <td>@orderItem.dish.Name</td>
                                <td>@orderItem.quantity st</td>
                                <td>@orderItem.dish.Price:-</td>
                            }
                            else
                            {
                                <td>@dayMenu.DayMenu.type</td>
                                <td>@orderItem.dish.Name</td>
                                <td>@orderItem.quantity st</td>
                                <td>@orderItem.dish.Price:-</td>
                            }
                        </tr>
                    }
                    previousDate = dayMenu.DayMenu.date;
                    previousType = dayMenu.DayMenu.type;
                }
            }
        }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public Order orderData { get; set; }

    private bool detailsVisible = false;
    private bool statusDelivered = false;
    private int totalPrice = 0;
    private int weekNr;
    private string orderStatus = "Beställd";
    private DateTime previousDate;
    private OrderType previousType = OrderType.Unknown;

    private void showDetails()
    {
        detailsVisible ^= true;
    }

    private string delivered(string status) {
        if (status == "Beställd") {
            return "ordered";
        } else {
            return "delivered";
        }
    }

    private string getButtonString() {
        return detailsVisible ? "Dölj detaljer" : "Visa detaljer";
    }

    protected override void OnInitialized()
    {
        var currentCulture = CultureInfo.CurrentCulture;

    // Get week of order (delivery week)
        for (var date = orderData.menu.startDate; date < orderData.menu.endDate; date = date.AddDays(1))
        {
            weekNr = currentCulture.Calendar.GetWeekOfYear(date, currentCulture.DateTimeFormat.CalendarWeekRule, currentCulture.DateTimeFormat.FirstDayOfWeek);
        }

    // Calculate total price for order
        foreach (var orderItem in orderData.orderItems)
        {
            totalPrice += orderItem.dish.Price * orderItem.quantity;
        }
    }

}