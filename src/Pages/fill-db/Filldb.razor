@page "/fill-db"
@using project_foodie.Data
@using project_foodie.Model
@using System.Text.Json
@using  System;
@using  System.Linq;
@using  Microsoft.EntityFrameworkCore;

<h1>Test</h1>
<p>@message</p>
 <button @onclick="FillDB">Fill DB</button>



@code {

    private string message = "Hello, world!";
    private Menu menu;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task FillDB()
    {
        var db = new DatabaseContext();
        //list of 3 menus
        List<Menu> menus = new List<Menu>()
        {
            new Menu(){ Name = "Vecka 8", lastOrderDate = new DateTime(2023, 2, 18), startDate = new DateTime(2023, 2, 20), endDate = new DateTime(2023, 2,26) },
            new Menu(){ Name = "Vecka 9", lastOrderDate = new DateTime(2023, 2, 25), startDate = new DateTime(2023, 2,27), endDate = new DateTime(2023, 3, 5) },
            new Menu(){ Name = "Vecka 10", lastOrderDate = new DateTime(2023, 3, 4), startDate = new DateTime(2023, 3, 6), endDate = new DateTime(2023, 3, 12) }
        };

       List<Dish> dishes = new List<Dish>()
        {
            new Dish(){ Name = "Raggmunk och fläsk", Type = FoodType.Pork, description = "Potato pancakes with pork", ImageUrl = "", Price = 30 },
            new Dish(){ Name = "Gravad lax med räkor", Type = FoodType.Fish, description = "Gravlax with shrimp", ImageUrl = "", Price = 50 },
            new Dish(){ Name = "Kycklinggryta", Type = FoodType.Chicken, description = "Chicken stew", ImageUrl = "", Price = 40 },
            new Dish(){ Name = "Schnitzel med potatis", Type = FoodType.Pork, description = "Schnitzel with potatoes", ImageUrl = "", Price = 35 },
            new Dish(){ Name = "Pasta carbonara", Type = FoodType.Pork, description = "Pasta with bacon and egg", ImageUrl = "", Price = 25 },
            new Dish(){ Name = "Pesto pasta med kyckling", Type = FoodType.Chicken, description = "Pesto pasta with chicken", ImageUrl = "", Price = 30 },
            new Dish(){ Name = "Stekt torsk med grönsaker", Type = FoodType.Fish, description = "Fried cod with vegetables", ImageUrl = "", Price = 45 },
            new Dish(){ Name = "Thai wok med kyckling", Type = FoodType.Chicken, description = "Thai wok with chicken", ImageUrl = "", Price = 35 },
            new Dish(){ Name = "Biff Stroganoff", Type = FoodType.Beef, description = "Beef Stroganoff", ImageUrl = "", Price = 50 },
            new Dish(){ Name = "Lasagne", Type = FoodType.Beef, description = "Lasagna", ImageUrl = "", Price = 35 },
            new Dish(){ Name = "Paella", Type = FoodType.Fish, description = "Paella", ImageUrl = "", Price = 50 },
            new Dish(){ Name = "Stir fry med tofu och grönsaker", Type = FoodType.Vegetarian, description = "Stir fry with tofu and vegetables", ImageUrl = "", Price = 25 },
            new Dish(){ Name = "Indisk curry med kyckling", Type = FoodType.Chicken, description = "Indian chicken curry", ImageUrl = "", Price = 35 },
            new Dish(){ Name = "Vietnamesisk Pho", Type = FoodType.Beef, description = "Vietnamese Pho", ImageUrl = "", Price = 30 },
            new Dish(){ Name = "Mexikansk tacos", Type = FoodType.Beef, description = "Mexican tacos", ImageUrl = "", Price = 20 },
            new Dish(){ Name = "Barbecued kyckling", Type = FoodType.Chicken, description = "Barbecued chicken", ImageUrl = "", Price = 40 },
            new Dish(){ Name = "Hamburgare med pommes", Type = FoodType.Beef, description = "Hamburger with fries", ImageUrl = "", Price = 25 },
            new Dish(){ Name = "Sushi platta", Type = FoodType.Fish, description = "Sushi platter", ImageUrl = "",Price = 60 },
            new Dish(){ Name = "Vegetariska vårrullar", Type = FoodType.Vegetarian, description = "Vegetarian spring rolls", ImageUrl = "", Price = 25 },
            new Dish(){ Name = "Quinoa salat med avocado", Type = FoodType.Vegetarian, description = "Quinoa salad with avocado", ImageUrl = "", Price = 30 },
            new Dish(){ Name = "Ris och böngryta", Type = FoodType.Vegetarian, description = "Rice and bean stew", ImageUrl = "", Price = 20 },
            new Dish(){ Name = "Grillad tonfisk med grönsaker", Type = FoodType.Fish, description = "Grilled tuna with vegetables", ImageUrl = "", Price = 50 },
            new Dish(){ Name = "Korianderlimekyckling med ris", Type = FoodType.Chicken, description = "Coriander lime chicken with rice", ImageUrl = "", Price = 35 },
            new Dish(){ Name = "Spansk tortilla", Type = FoodType.Vegetarian, description = "Spanish omelette", ImageUrl = "", Price = 25 },
            new Dish(){ Name = "Vegetariska grönsaksbiffar", Type = FoodType.Vegetarian, description = "Vegetarian vegetable patties", ImageUrl = "", Price = 20 },
            new Dish(){ Name = "Fisk- och skaldjursgryta", Type = FoodType.Fish, description = "Fish and seafood stew", ImageUrl = "", Price = 50 },
            new Dish(){ Name = "Linscurry med kokosmjölk", Type = FoodType.Vegetarian, description = "Lentil curry with coconut milk", ImageUrl = "", Price = 25 }
        };

        await db.Menus.AddRangeAsync(menus);
        await db.Dishes.AddRangeAsync(dishes);
        await db.SaveChangesAsync();

        //Add dishes to menus
        foreach (var menu in menus)
        {
            Random rnd = new Random();
            //rand nr of dishes
            int nrOfDishes = rnd.Next(1, 6);
            Console.WriteLine("Nr of dishes: " + nrOfDishes);
            //start index count - nrofdishes
            int index = rnd.Next(0, dishes.Count - nrOfDishes);
            //list of dishes
            for(int i = 0; i < nrOfDishes; i++)
            {
                Console.WriteLine("Menu: " + menu.Name + " Dish: " + dishes[i].Name);
                Menu.AddDishToMenu(menu.Id, dishes[i].Id);
            }
        }
    }

    async void getFirstMenu(){
       this.menu = await Menu.GetMenuByIdAsync(1);
    }
}