@using project_foodie.Model
@using project_foodie.Repository
@namespace project_foodie.Pages.Webmaster
<h1 > Test </h1>
<p > @message </p>
<button @onclick ="FillDB"> Fill DB </button>
<button @onclick ="clearDb"> Clear DB </button>

@code {

    private string message = "Hello, world!";
    private Menu menu;

    private void clearDb()
    {
        var db = new DatabaseContext();
        db.Database.EnsureDeleted();
        db.Database.EnsureCreated();
        message = "DB cleared";
    }

    private Ingredient CreateIngredient(string name)
    {
        var Ingredient = new Ingredient
        {
            Name = name,
            Allergens = new List<Allergen>()
        };

        return Ingredient;
    }

    private string getDishName()
    {
        string[] meat = { "Köttbullar", "Skinkstek", "Ryggbiff", "Skadjur", "Pizza" };
        string[] carbs = { "potatis", "ris", "pasta", "potatisgratäng", "matvete" };

        var rnd = new Random();
        var meatIndex = rnd.Next(0, meat.Length);
        var carbsIndex = rnd.Next(0, carbs.Length);
        return meat[meatIndex] + " med " + carbs[carbsIndex];
    }

    private int getPrice()
    {
        var rnd = new Random();
        return rnd.Next(50, 100);
    }

    private async Task FillDB()
    {
        using (var db = new DatabaseContext())
        {
            IRepositoryWrapper repository = new RepositoryWrapper(db);

            var rnd = new Random();

            var allergens = new List<Allergen>
            {
                new()
                {
                    Name = "Baljväxter"
                },
                new()
                {
                    Name = "Laktos"
                },
                new()
                {
                    Name = "Gluten"
                },
                new()
                {
                    Name = "Nötter"
                }
            };

            foreach (var allergen in allergens)
            {
    //add allergen
                repository.Allergen.AddAllergen(allergen);
            }

            var startDate = new DateTime(2023, 2, 20);
            var endDate = new DateTime(2023, 2, 26);
            var lastOrderDate = new DateTime(2023, 2, 18);
            var menus = new List<Menu>();
            for (var i = 0; i < 10; i++)
            {
                var menu = new Menu
                {
                    Name = "Vecka " + i,
                    lastOrderDate = lastOrderDate.AddDays(7 * i),
                    startDate = startDate.AddDays(7 * i),
                    endDate = endDate.AddDays(7 * i)
                };
                menus.Add(menu);
            }

            await repository.SaveAsync();


    // Create ingredients
            for (var index = 0; index < 70; index++)
            {
                var ingredient = CreateIngredient("Ingredient " + index);
                repository.Ingredient.AddIngredient(ingredient);
                repository.Ingredient.AddAllergenToIngredient(ingredient, await repository.Allergen.GetByIdAsync(rnd.Next(1, 5)));
            }

            await repository.SaveAsync();

    //loop over menus
            foreach (var menu in menus)
            {
    //add menu
                repository.Menu.AddMenu(menu);
                Console.WriteLine("Menu added: " + menu.Id);
            }

    //loop over menus
            foreach (var menu in menus)
            {
                var order = new Order
                {
                    userId = 1,
                    menu = menu,
                    orderDate = menu.lastOrderDate,
                    orderItems = new List<OrderItem>()
                };
                repository.Order.AddOrder(order);
    //loop over dishes
                for (var i = 0; i < 3; i++)
                {
                    for (var index = 0; index < 7; index++)
                    {
    //add dish to menu
                        var date = menu.startDate.AddDays(index);
    //Add dishes

                        var dish = new Dish
                        {
                            Name = getDishName(),
                            Price = getPrice(),
                            description = "Description " + index,
                            ImageUrl = "Image " + index
                        };
                        dish.Type = (FoodType)rnd.Next(1, 6);
                        dish.description = dish.Name;
                        dish.Ingredients = new List<Ingredient>();

                        for (var j = 0; j < 2; j++)
                        {
                            repository.Dish.AddAllergenToDish(dish, await repository.Allergen.GetByIdAsync(rnd.Next(1, 5)));
                        }
                        for (var j = 0; j < 7; j++)
                        {
                            repository.Dish.AddIngredientToDish(dish, await repository.Ingredient.GetByIdAsync(rnd.Next(1, 70)));
                        }
                        repository.Dish.AddDish(dish);
                        repository.Menu.AddDayMenu(menu, date, dish, OrderType.Lunch);
                        Console.WriteLine("[FillDB]: Dish added to menu: " + dish.Name + "/" + menu.Name + "/" + date);
                        if (i == 2)
                        {
                            repository.Order.AddOrderItem(order, dish, rnd.Next(1, 10), date, OrderType.Lunch);
                        }
                    }
                }

                for (var i = 0; i < 3; i++)
                {
                    for (var index = 0; index < 7; index++)
                    {
    //add dish to menu
                        @* Random rnd = new Random(); *@
                        var date = menu.startDate.AddDays(index);
    //Add dishes

                        var dish = new Dish
                        {
                            Name = getDishName(),
                            Price = getPrice(),
                            description = "Description " + index,
                            ImageUrl = "Image " + index
                        };
                        dish.Type = (FoodType)rnd.Next(1, 6);
                        dish.description = dish.Name;
                        dish.Ingredients = new List<Ingredient>();

                        for (var j = 0; j < 2; j++)
                        {
                            repository.Dish.AddAllergenToDish(dish, await repository.Allergen.GetByIdAsync(rnd.Next(1, 5)));
                        }
                        for (var j = 0; j < 7; j++)
                        {
                            repository.Dish.AddIngredientToDish(dish, await repository.Ingredient.GetByIdAsync(rnd.Next(1, 70)));
                        }
                        repository.Dish.AddDish(dish);
                        repository.Menu.AddDayMenu(menu, date, dish, OrderType.Lunch);
                        Console.WriteLine("[FillDB]: Dish added to menu: " + dish.Name + "/" + menu.Name + "/" + date);

                        if (i == 1)
                        {
                            repository.Order.AddOrderItem(order, dish, rnd.Next(1, 10), date, OrderType.Middag);
                        }
                    }
                }
                var ghostDish = new Dish
                {
                    Name = "GHOST_DISH_DISABLE_MEAL",
                    Price = 0,
                    description = ""
                };
                ghostDish.Type = FoodType.Unknown;
                repository.Dish.AddDish(ghostDish);
                for (var i = 0; i < 7; i++)
                {
                    repository.Menu.AddDayMenu(menu, menu.startDate.AddDays(i), ghostDish, OrderType.Lunch);
                    repository.Menu.AddDayMenu(menu, menu.startDate.AddDays(i), ghostDish, OrderType.Middag);
                }
            }
            await repository.SaveAsync();
        }
    }


    async void getFirstMenu()
    {
        using (var db = new DatabaseContext())
        {
            var repository = new RepositoryWrapper(db);
            menu = await repository.Menu.GetByIdAsync(1);
        }
    //print menu
        Console.WriteLine("Menu: " + menu.Name);
    }

}