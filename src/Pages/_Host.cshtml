@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace project_foodie.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="~/"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="project-foodie.styles.css" rel="stylesheet"/>
    <link rel="icon" type="image/png" href="favicon.png"/>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
</head>

<body>
<component type="typeof(App)" render-mode="ServerPrerendered"/>

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
<script type="module">
        import { confetti } from "https://cdn.jsdelivr.net/npm/tsparticles-confetti/+esm";
        window.confettis = () => {
            const end = Date.now() + 1100;
            const colors = ["#067A46", "#ffffff"];
            (function frame() {
                confetti({
                particleCount: 2,
                angle: 60,
                spread: 95,
                origin: { x: 0 },
                colors: colors
                });

                confetti({
                particleCount: 2,
                angle: 120,
                spread: 95,
                origin: { x: 1 },
                colors: colors
                });

                if (Date.now() < end) {
                requestAnimationFrame(frame);
                }
            })();
        };
    </script>
<script type="text/javascript">
    state = 'desktop';
    window.blazorOnLoad = function(dotNetHelper) {
        window.addEventListener('resize',
            () => {
                if (window.innerWidth < 768) {
                    if (state != 'mobile') {
                        state = 'mobile';
                        dotNetHelper.invokeMethodAsync('setViewPort', 'mobile');
                    }
                    return 'mobile';
                } else if (window.innerWidth < 1024) {
                    if (state != 'tablet') {
                        dotNetHelper.invokeMethodAsync('setViewPort', 'tablet');
                        state = 'tablet';
                    }
                    return 'tablet';
                } else {
                    if (state != 'desktop') {
                        dotNetHelper.invokeMethodAsync('setViewPort', 'desktop');
                        state = 'desktop';
                    }
                    return 'desktop';
                }
            });
        if (window.innerWidth < 768) {
            if (state != 'mobile') {
                state = 'mobile';
                dotNetHelper.invokeMethodAsync('setViewPort', 'mobile');
            }
            return 'mobile';
        } else if (window.innerWidth < 1024) {
            if (state != 'tablet') {
                dotNetHelper.invokeMethodAsync('setViewPort', 'tablet');
                state = 'tablet';
            }
            return 'tablet';
        } else {
            if (state != 'desktop') {
                dotNetHelper.invokeMethodAsync('setViewPort', 'desktop');
                state = 'desktop';
            }
            return 'desktop';
        }
    };

    function scrollToTop() {
        setTimeout(function() {
                window.scrollTo({
                    top: 0,
                    behavior: "smooth"
                });
            },
            350);
    }

    function getLocalStorageCount() {
        const localStorageContent = JSON.parse(localStorage.getItem('dishData'));

        if (!localStorageContent) {
            return 0;
        }

        const filteredObjects = Object.values(localStorageContent)
            .filter(obj => Object.values(obj).some(count => count > 0));

        return filteredObjects.length;
    }

    window.addEventListener('storage',
        () => {
            const count = getLocalStorageCount();
            dotNetHelper.invokeMethodAsync('Project.Foodie', 'UpdateLocalStorageCount');
        });


    /* Hide header on scroll*/
    var doc = document.documentElement;
    var w = window;

    var prevScroll = w.scrollY || doc.scrollTop;
    var curScroll;
    var direction = 0;
    var prevDirection = 0;

    function checkScroll() {

        /*
        ** Find the direction of scroll
        ** 0 - initial, 1 - up, 2 - down
        */

        curScroll = w.scrollY || doc.scrollTop;
        if (curScroll > prevScroll) { 
            //scrolled up
            direction = 2;
        }
        else if (curScroll < prevScroll) { 
            //scrolled down
            direction = 1;
        }

        if (direction !== prevDirection) {
            toggleHeader(direction, curScroll);
            console.log('toggle');
        }
        
        prevScroll = curScroll;
    };

    var toggleHeader = function(direction, curScroll) {

        if (direction === 2 && curScroll > 80 && screen.width > 600) { 
        
            var sheet = window.document.styleSheets[0];
            sheet.insertRule('.menu-header { top: 0 !important; }', sheet.cssRules.length);
            sheet.insertRule('#header { top: -5em !important; }', sheet.cssRules.length);
            prevDirection = direction;
        } else if (direction === 2 && curScroll > 80 && screen.width <= 600) { 
        
            var sheet = window.document.styleSheets[0];
            sheet.insertRule('#header { top: -5em !important; }', sheet.cssRules.length);
            sheet.insertRule('.mobile-header { top: -5em !important; }', sheet.cssRules.length);
            sheet.insertRule('.menu-header { top: 0 !important; }', sheet.cssRules.length);
            prevDirection = direction;
        }
        else if (direction === 1 && curScroll < 80) {
            var sheet = window.document.styleSheets[0];
            sheet.insertRule('.menu-header { top: 5em !important; }', sheet.cssRules.length);
            sheet.insertRule('#header { top: 0 !important; }', sheet.cssRules.length);
            sheet.insertRule('.mobile-header { top: 0 !important; }', sheet.cssRules.length);
            prevDirection = direction;
        }
    };

    window.addEventListener('scroll', checkScroll);

</script>
<script src="_framework/blazor.server.js"></script>
</body>

</html>