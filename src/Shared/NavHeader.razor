@inject ILocalStorageService localStorage
@inject CartService CartService
@inject NavigationManager NavManager

<div id="header" class="header">
    <div class="logo">
        <h1>CGI | Platform Name</h1>
    </div>
    <div class="navbar nav">
        <NavLink class="@(activePage == "/" ? "nav-link-active" : "nav-link")" href="/" @onclick="@(() => activePage = "/")">
            <div class="nav-link-item">
                <img src="/images/house-door.svg" alt="icon name">
                <span>Start</span>
            </div>
        </NavLink>
        <NavLink class="@(activePage == "/order" ? "nav-link-active" : "nav-link")" href="order" @onclick="@(() => activePage = "/order")">
            <div class="nav-link-item">
                <img src="/images/shop.svg" alt="icon name">
                <span class="nav-link-text">Best√§ll</span>
            </div>
        </NavLink>
        <NavLink class="@(activePage == "/me" ? "nav-link-active" : "nav-link")" href="me" @onclick="@(() => activePage = "/me")">
            <div class="nav-link-item">
                <img src="/images/person.svg" alt="icon name">
                <span>Mina sidor</span>
            </div>
        </NavLink>
        <NavLink class="nav-link" href="/order?page=14">
            <div class="nav-kassan">
                <img src="/images/shopping-basket.svg" width="50px" height="50px"/>
                <span class="nav-kassan-counter">
                    <p>@cartCount</p>
                </span>
            </div>
        </NavLink>
    </div>
</div>

@code {

    // Variable to hold the cart count
    private int itemsCountInKassan;
    private int cartCount;

    // 
    private string activePage = string.Empty;
@* 
    bool getDefaultActive()
    {
        if (section == "order_history" || section == "invoices" || section == "favourites" || section == "aboutme")
        {
            return false;
        }

        return true;
    } *@

    // OnInitializedAsync is called when the component is first rendered
    protected override async void OnInitialized()
    {
        cartCount = await CartService.GetObjectCount();
        CartService.SetCartCount(cartCount);
        CartService.CartCountChanged += HandleCartCountChanged;

        var uri = new Uri(NavManager.Uri);
        activePage = uri.LocalPath;
    }

    // Handle the event when the cart count changes
    private void HandleCartCountChanged(object sender, EventArgs e)
    {
        cartCount = CartService.GetCartCount();
        StateHasChanged();
    }

    // OnAfterRenderAsync is called after the component has been rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            itemsCountInKassan = await CartService.GetObjectCount();
            StateHasChanged();
        }
    }

}